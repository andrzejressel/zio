"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[37162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,m=d["".concat(i,".").concat(u)]||d[u]||h[u]||a;return n?r.createElement(m,c(c({ref:t},p),{},{components:n})):r.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},86632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={id:"websocket-server",title:"WebSocket Server Example",sidebar_label:"WebSocket Server"},c=void 0,s={unversionedId:"zio-http/examples/advanced/websocket-server",id:"zio-http/examples/advanced/websocket-server",title:"WebSocket Server Example",description:"",source:"@site/docs/zio-http/examples/advanced/websocket-server.md",sourceDirName:"zio-http/examples/advanced",slug:"/zio-http/examples/advanced/websocket-server",permalink:"/zio-http/examples/advanced/websocket-server",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/advanced/websocket-server.md",tags:[],version:"current",frontMatter:{id:"websocket-server",title:"WebSocket Server Example",sidebar_label:"WebSocket Server"},sidebar:"ecosystem-sidebar",previous:{title:"Streaming Response",permalink:"/zio-http/examples/advanced/streaming-response"},next:{title:"ZIO Insight",permalink:"/zio-insight/"}},i={},l=[],p={toc:l},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nimport zio.http.ChannelEvent.{ChannelRead, ExceptionCaught, UserEvent, UserEventTriggered}\nimport zio.http._\nimport zio.http.socket._\n\nobject WebSocketAdvanced extends ZIOAppDefault {\n  val messageFilter: Http[Any, Nothing, WebSocketChannelEvent, (Channel[WebSocketFrame], String)] =\n    Http.collect[WebSocketChannelEvent] { case ChannelEvent(channel, ChannelRead(WebSocketFrame.Text(message))) =>\n      (channel, message)\n    }\n\n  val messageSocket: Http[Any, Throwable, WebSocketChannelEvent, Unit] =\n    messageFilter >>> Handler.fromFunctionZIO[(WebSocketChannel, String)] {\n      case (ch, "end") => ch.close()\n\n      // Send a "bar" if the server sends a "foo"\n      case (ch, "foo") => ch.writeAndFlush(WebSocketFrame.text("bar"))\n\n      // Send a "foo" if the server sends a "bar"\n      case (ch, "bar") => ch.writeAndFlush(WebSocketFrame.text("foo"))\n\n      // Echo the same message 10 times if it\'s not "foo" or "bar"\n      // Improve performance by writing multiple frames at once\n      // And flushing it on the channel only once.\n      case (ch, text) =>\n        ch.write(WebSocketFrame.text(text)).repeatN(10) *> ch.flush\n    }\n\n  val channelSocket: Http[Any, Throwable, WebSocketChannelEvent, Unit] =\n    Http.collectZIO[WebSocketChannelEvent] {\n\n      // Send a "greeting" message to the server once the connection is established\n      case ChannelEvent(ch, UserEventTriggered(UserEvent.HandshakeComplete))  =>\n        ch.writeAndFlush(WebSocketFrame.text("Greetings!"))\n\n      // Log when the channel is getting closed\n      case ChannelEvent(_, ChannelRead(WebSocketFrame.Close(status, reason))) =>\n        Console.printLine("Closing channel with status: " + status + " and reason: " + reason)\n\n      // Print the exception if it\'s not a normal close\n      case ChannelEvent(_, ExceptionCaught(cause))                            =>\n        Console.printLine(s"Channel error!: ${cause.getMessage}")\n    }\n\n  val httpSocket: Http[Any, Throwable, WebSocketChannelEvent, Unit] =\n    messageSocket ++ channelSocket\n\n  val protocol = SocketProtocol.default.withSubProtocol(Some("json")) // Setup protocol settings\n\n  val decoder = SocketDecoder.default.withExtensions(allowed = true) // Setup decoder settings\n\n  val socketApp: SocketApp[Any] = // Combine all channel handlers together\n    httpSocket.toSocketApp\n      .withDecoder(decoder)   // Setup websocket decoder config\n      .withProtocol(protocol) // Setup websocket protocol config\n\n  val app: Http[Any, Nothing, Request, Response] =\n    Http.collectZIO[Request] {\n      case Method.GET -> !! / "greet" / name  => ZIO.succeed(Response.text(s"Greetings ${name}!"))\n      case Method.GET -> !! / "subscriptions" => socketApp.toResponse\n    }\n\n  override val run = Server.serve(app).provide(Server.default)\n}\n')))}h.isMDXComponent=!0}}]);