"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[93403],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=i.createContext({}),p=function(e){var t=i.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(r.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(r,".").concat(m)]||c[m]||d[m]||o;return n?i.createElement(h,s(s({ref:t},u),{},{components:n})):i.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},11359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const o={id:"index",title:"ZIO SBT"},s=void 0,l={unversionedId:"zio-sbt/index",id:"zio-sbt/index",title:"ZIO SBT",description:"ZIO SBT is an sbt plugin for ZIO projects. It provides high-level SBT utilities that simplify the development of ZIO applications.",source:"@site/docs/zio-sbt/index.md",sourceDirName:"zio-sbt",slug:"/zio-sbt/",permalink:"/zio-sbt/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-sbt/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"ZIO SBT"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO S3",permalink:"/zio-s3/"},next:{title:"ZIO SQL",permalink:"/zio-sql/"}},r={},p=[{value:"Installation",id:"installation",level:2},{value:"ZIO SBT Website",id:"zio-sbt-website",level:2},{value:"ZIO SBT CI Plugin",id:"zio-sbt-ci-plugin",level:2},{value:"Getting Started",id:"getting-started",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ZIO SBT")," is an sbt plugin for ZIO projects. It provides high-level SBT utilities that simplify the development of ZIO applications."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg",alt:"Production Ready"}))," ",(0,a.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-sbt/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,a.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-sbt-website_2.12/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-sbt-website_2.12.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-sbt-website_2.12/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-sbt-website_2.12.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-sbt-docs_2.12"},(0,a.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-sbt-docs_2.12/javadoc.svg",alt:"javadoc"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-sbt"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-sbt?style=social",alt:"ZIO SBT"}))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Add the following lines to your ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'addSbtPlugin("dev.zio" % "zio-sbt-website" % "0.4.0-alpha.8")\n')),(0,a.kt)("p",null,"Then you can enable it by using the following code in your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"enablePlugins(WebsitePlugin)\n")),(0,a.kt)("h2",{id:"zio-sbt-website"},"ZIO SBT Website"),(0,a.kt)("p",null,"ZIO SBT Website is an SBT plugin that has the following tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt compileDocs"),"\u2014 compile documentation inside ",(0,a.kt)("inlineCode",{parentName:"li"},"docs")," directory. The compilation result will be inside ",(0,a.kt)("inlineCode",{parentName:"li"},"website/docs")," directory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt installWebsite"),"\u2014 creates a website for the project inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"website")," directory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt previewWebsite"),"\u2014 runs a local webserver that serves documentation locally on http://localhost:3000. By changing the documentation inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"docs")," directory, the website will be reloaded with new content."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt publishToNpm"),"\u2014 publishes documentation inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"docs")," directory to the npm registry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt generateGithubWorkflow"),"\u2014 generates GitHub workflow which publishes documentation for each library release."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sbt generateReadme"),"\u2014 generate README.md file from ",(0,a.kt)("inlineCode",{parentName:"li"},"docs/index.md")," and sbt setting keys.")),(0,a.kt)("h2",{id:"zio-sbt-ci-plugin"},"ZIO SBT CI Plugin"),(0,a.kt)("p",null,"ZIO SBT CI is an sbt plugin which generates a GitHub workflow for a project, making it easier to set up continuous integration (CI) pipelines for Scala projects. With this plugin, developers can streamline their development workflow by automating the testing and deployment process, reducing manual effort and errors. The plugin is designed to work seamlessly with sbt, the popular build tool for Scala projects, and integrates smoothly with GitHub Actions, the CI/CD platform provided by GitHub."),(0,a.kt)("p",null,"ZIO SBT CI provides a simple and efficient way to configure, manage, and run CI pipelines, helping teams to deliver high-quality software faster and with greater confidence."),(0,a.kt)("p",null,"ZIO SBT CI plugin generates a default GitHub workflow that includes common CI tasks such as building, testing, and publishing artifacts. However, users can also manually customize the workflow. This plugin is designed to be flexible and extensible, making it easy for users to tailor the workflow to their specific needs. Additionally, the plugin also provides tons of optional sbt settings that users can modify to change various aspects of the generated workflow. Overall, ZIO SBT CI plugin strikes a balance between automation and flexibility, allowing users to automate their CI process while still giving them control over how the workflow is generated."),(0,a.kt)("h3",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"To use ZIO SBT CI plugin, add the following lines to your ",(0,a.kt)("inlineCode",{parentName:"p"},"plugins.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'addSbtPlugin("dev.zio" % "zio-sbt-ci" % "0.4.0-alpha.8")\n\nresolvers ++= Resolver.sonatypeOssRepos("public")\n')),(0,a.kt)("p",null,"Then in your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.sbt")," file, enable the plugin by adding the following line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"enablePlugins(ZioSbtCiPlugin)\n")),(0,a.kt)("p",null,"Now you can generate a Github workflow by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sbt ciGenerateGithubWorkflow\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ciTargetScalaVersions")," setting key is used to define a mapping of project names to the Scala versions that should be used for testing phase of continuous integration (CI)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("p",{parentName:"blockquote"},"To use this plugin, we also need to install ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apps/zio-assistant"},"ZIO Assistant")," bot.")),(0,a.kt)("p",null,"In the example provided, ",(0,a.kt)("inlineCode",{parentName:"p"},"ciTargetScalaVersions")," is defined at the ",(0,a.kt)("inlineCode",{parentName:"p"},"ThisBuild")," level, meaning that the setting will apply to all projects within the build. The setting defines a Map where the key is the name of the current project, obtained by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," method on the ",(0,a.kt)("inlineCode",{parentName:"p"},"thisProject")," setting, and the value is a sequence of Scala versions obtained from the ",(0,a.kt)("inlineCode",{parentName:"p"},"crossScalaVersions")," of each submodule setting."),(0,a.kt)("p",null,"By default, sbt will run the test task for each project in the build using the default ",(0,a.kt)("inlineCode",{parentName:"p"},"ThisBuild / crossScalaVersion")," (not implemented yet). However, this may not be sufficient for projects that need to be tested against multiple Scala versions, such as libraries or frameworks that support different versions of Scala. In such cases, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ciTargetScalaVersions")," setting can be used to define the Scala versions supported by each submodule."),(0,a.kt)("p",null,'For example, suppose we have a project with the name "submoduleA" and we want to test it against Scala ',(0,a.kt)("inlineCode",{parentName:"p"},"2.11.12")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"2.12.17"),', and for the "submoduleB" we want to test it against Scala ',(0,a.kt)("inlineCode",{parentName:"p"},"2.12.17")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"2.13.10")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"3.2.2"),", We can define the ",(0,a.kt)("inlineCode",{parentName:"p"},"ciTargetScalaVersions")," setting as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ThisBuild / ciTargetScalaVersions := Map(\n    "submoduleA" -> Seq("2.11.12", "2.12.17"),\n    "submoduleB" -> Seq("2.12.17", "2.13.10", "3.2.2")\n  )\n')),(0,a.kt)("p",null,"To simplify this process, we can populate the versions using each submodule's crossScalaVersions setting as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"ThisBuild / ciTargetScalaVersions := Map(\n  (submoduleA / thisProject).value.id -> (submoduleA / crossScalaVersions).value,\n  (submoduleB / thisProject).value.id -> (submoduleB / crossScalaVersions).value\n)\n")),(0,a.kt)("p",null,"The above code can be simplified further by using ",(0,a.kt)("inlineCode",{parentName:"p"},"targetScalaVersionsFor")," helper method, it takes a list of submodules and returns a Map of project names to their ",(0,a.kt)("inlineCode",{parentName:"p"},"crossScalaVersions"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"ThisBuild / ciTargetScalaVersions := targetScalaVersionsFor(submoduleA, submoduleB).value\n")))}d.isMDXComponent=!0}}]);