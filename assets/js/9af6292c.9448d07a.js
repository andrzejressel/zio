"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[34800],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>v});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),d=i,v=c["".concat(p,".").concat(d)]||c[d]||f[d]||o;return t?n.createElement(v,a(a({ref:r},u),{},{components:t})):n.createElement(v,a({ref:r},u))}));function v(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},62111:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=t(87462),i=(t(67294),t(3905));const o={id:"supervisor",title:"Supervisor"},a=void 0,s={unversionedId:"datatypes/misc/supervisor",id:"version-1.x/datatypes/misc/supervisor",title:"Supervisor",description:"A Supervisor[A] is allowed to supervise the launching and termination of fibers, producing some visible value of type A from the supervision.",source:"@site/versioned_docs/version-1.x/datatypes/misc/supervisor.md",sourceDirName:"datatypes/misc",slug:"/datatypes/misc/supervisor",permalink:"/version-1.x/datatypes/misc/supervisor",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.x/datatypes/misc/supervisor.md",tags:[],version:"1.x",frontMatter:{id:"supervisor",title:"Supervisor"},sidebar:"datatypes-sidebar",previous:{title:"Schedule",permalink:"/version-1.x/datatypes/misc/schedule"}},p={},l=[{value:"Creation",id:"creation",level:2},{value:"track",id:"track",level:3},{value:"fibersIn",id:"fibersin",level:3},{value:"Supervising",id:"supervising",level:2},{value:"Example",id:"example",level:2}],u={toc:l},c="wrapper";function f(e){let{components:r,...t}=e;return(0,i.kt)(c,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Supervisor[A]")," is allowed to supervise the launching and termination of fibers, producing some visible value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," from the supervision."),(0,i.kt)("h2",{id:"creation"},"Creation"),(0,i.kt)("h3",{id:"track"},"track"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"track")," creates a new supervisor that tracks children in a set. It takes a boolean ",(0,i.kt)("inlineCode",{parentName:"p"},"weak")," parameter as input, which indicates whether track children in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Weakset")," or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val supervisor = Supervisor.track(true)\n// supervisor: zio.package.UIO[Supervisor[zio.Chunk[zio.Fiber.Runtime[Any, Any]]]] = zio.ZIO$EffectTotal@16c354e3\n")),(0,i.kt)("p",null,"We can periodically, report the status of the fibers of our program with the help of the Supervisor."),(0,i.kt)("h3",{id:"fibersin"},"fibersIn"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"fibersIn")," creates a new supervisor with an initial sorted set of fibers."),(0,i.kt)("p",null,"In the following example we are creating a new supervisor from an initial set of fibers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def fiberListSupervisor = for { \n  ref <- Ref.make(SortedSet.from(fibers))\n  s <- Supervisor.fibersIn(ref)\n} yield (s)\n")),(0,i.kt)("h2",{id:"supervising"},"Supervising"),(0,i.kt)("p",null,"Whenever we need to supervise a ZIO effect, we can call ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#supervised")," function, ",(0,i.kt)("inlineCode",{parentName:"p"},"supervised")," takes a supervisor and return another effect. The behavior of children fibers is reported to the provided supervisor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val supervised = supervisor.flatMap(s => fib(20).supervised(s))\n")),(0,i.kt)("p",null,"Now we can access all information of children fibers through the supervisor."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In the following example we are going to periodically monitor the number of fibers throughout our application life cycle:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object SupervisorExample extends zio.App {\n  import zio.duration._\n\n  val program = for {\n    supervisor <- Supervisor.track(true)\n    fiber <- fib(20).supervised(supervisor).fork\n    policy = Schedule\n      .spaced(500.milliseconds)\n      .whileInputM[Any, Unit](_ => fiber.status.map(x => !x.isDone))\n    logger <- monitorFibers(supervisor)\n      .repeat(policy).fork\n    _ <- logger.join\n    result <- fiber.join\n    _ <- putStrLn(s"fibonacci result: $result")\n  } yield ()\n\n  def monitorFibers(supervisor: Supervisor[Chunk[Fiber.Runtime[Any, Any]]]) = for {\n    length <- supervisor.value.map(_.length)\n    _ <- putStrLn(s"number of fibers: $length")\n  } yield ()\n\n  def fib(n: Int): ZIO[Clock, Nothing, Int] =\n    if (n <= 1) {\n      ZIO.succeed(1)\n    } else {\n      for {\n        _ <- sleep(500.milliseconds)\n        fiber1 <- fib(n - 2).fork\n        fiber2 <- fib(n - 1).fork\n        v2 <- fiber2.join\n        v1 <- fiber1.join\n      } yield v1 + v2\n    }\n\n  override def run(args: List[String]) = program.exitCode\n}\n')))}f.isMDXComponent=!0}}]);