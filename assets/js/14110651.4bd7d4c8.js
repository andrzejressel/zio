"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[15821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1840:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={id:"zref",title:"ZRef"},i=void 0,p={unversionedId:"datatypes/concurrency/zref",id:"version-1.x/datatypes/concurrency/zref",title:"ZRef",description:"A ZRef[EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ZRef are set and get.",source:"@site/versioned_docs/version-1.x/datatypes/concurrency/zref.md",sourceDirName:"datatypes/concurrency",slug:"/datatypes/concurrency/zref",permalink:"/version-1.x/datatypes/concurrency/zref",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.x/datatypes/concurrency/zref.md",tags:[],version:"1.x",frontMatter:{id:"zref",title:"ZRef"},sidebar:"datatypes-sidebar",previous:{title:"Introduction",permalink:"/version-1.x/datatypes/concurrency/"},next:{title:"Ref",permalink:"/version-1.x/datatypes/concurrency/ref"}},l={},c=[],s={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef[EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," are ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),". "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"set"))," takes a value of type ",(0,a.kt)("inlineCode",{parentName:"li"},"A")," and sets the reference to a new value, potentially failing with an error of type ",(0,a.kt)("inlineCode",{parentName:"li"},"EA"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"get"))," gets the current value of the reference and returns a value of type ",(0,a.kt)("inlineCode",{parentName:"li"},"B"),", potentially\nfailing with an error of type ",(0,a.kt)("inlineCode",{parentName:"li"},"EB"),".")),(0,a.kt)("p",null,"When the error and value types of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," are unified, that is, it is a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef[E, E, A, A]"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," also supports atomic ",(0,a.kt)("inlineCode",{parentName:"p"},"modify")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," operations. All operations are guaranteed to be safe for concurrent access."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"Note:"))),(0,a.kt)("p",{parentName:"blockquote"},"While ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," provides the functional equivalent of a mutable reference, the value inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," should be immutable. For performance reasons ",(0,a.kt)("inlineCode",{parentName:"p"},"ZRef")," is implemented in terms of compare and swap operations rather than synchronization. ",(0,a.kt)("strong",{parentName:"p"},"These operations are not safe for mutable values that do not support concurrent access"),".")))}f.isMDXComponent=!0}}]);